" ======== VUNDLE ========
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Vundle
Plugin 'VundleVim/Vundle.vim'

" Theme
Plugin 'NLKNguyen/papercolor-theme'

" Whitespace management
Plugin 'ntpeters/vim-better-whitespace'

" Text filtering and allignment
Plugin 'godlygeek/tabular'

" Commenting
Plugin 'scrooloose/nerdcommenter'

" Tree-style file explorer
Plugin 'scrooloose/nerdtree'

" Status/tabline
Plugin 'itchyny/lightline.vim'

" Git
Plugin 'tpope/vim-fugitive'

" Sessions
Plugin 'tpope/vim-obsession'
Plugin 'dhruvasagar/vim-prosession'

" Vim-tmux
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'tmux-plugins/vim-tmux-focus-events'

" Clang-format
Plugin 'rhysd/vim-clang-format'

" Fuzzy finder
Plugin 'junegunn/fzf.vim'

" Asynchronous code linting
Plugin 'dense-analysis/ale'

" ALE indicators for lightline
Plugin 'maximbaz/lightline-ale'

" sourcetrail
Plugin 'CoatiSoftware/vim-sourcetrail'

" Python
Plugin 'vim-python/python-syntax'
Plugin 'davidhalter/jedi-vim'

" Toml
Plugin 'cespare/vim-toml'

" Dockerfile syntax
Plugin 'ekalinin/Dockerfile.vim'

" Plantuml
Plugin 'scrooloose/vim-slumlord'
Plugin 'aklt/plantuml-syntax'

call vundle#end()

" ======== GENERAL ========

let mapleader = ","
let maplocalleader = ",,"

filetype plugin indent on
set history=500
set omnifunc=syntaxcomplete#Complete
set autoread
set wildmenu
set ruler
set cmdheight=2
set encoding=utf8
set ffs=unix,dos,mac
set number
set mouse=c
set clipboard=unnamedplus
set cursorline
set lazyredraw
set showmatch
set mat=2

" A buffer becomes hidden when it is abandoned
set hid

" number of lines to keep above and below the cursor
:set scrolloff=13

" Configure backspace
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Search
set ignorecase
set smartcase
set hlsearch
set incsearch

syntax enable

" enable all Python syntax highlighting features
let python_highlight_all = 1
let python_version_2 = 0

" Theme
colorscheme PaperColor
set background=dark

" No backups
set nobackup
set nowb
set noswapfile

" Tabs
set expandtab
set smarttab
set shiftwidth=4
set tabstop=4

set sw=0

" Folding
set foldenable
set foldlevelstart=0
set foldnestmax=10
map <leader>z za

map <space> /
map <c-space> ?

" Move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Switch buffers
map <leader>bl :bnext<cr>
map <leader>bh :bprevious<cr>

" Map tabs
map tn :tabnew<cr>
map tc :tabclose<cr>
map tm :tabmove
execute "set <M-l>=\el"
execute "set <M-h>=\eh"
noremap <M-l> :tabnext<cr>
noremap <M-h> :tabprev<cr>

" Hide men bar, toolbar and scrollbar
set guioptions-=m  "menu bar
set guioptions-=T  "toolbar
set guioptions-=r  "scrollbar
set guioptions-=l "scrollbar
set guioptions-=L "scrollbar

" FZF
set rtp+=~/.fzf

nnoremap <C-f> :Files<Cr>
nnoremap <C-g> :Rg<Cr>

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1
" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

" Map Nerdtree
map <leader>n :NERDTreeToggle<cr>
map <leader>r :NERDTreeFind<cr>
let g:NERDTreeWinSize=60

" Custom file extensions
au BufRead,BufNewFile *.launch set filetype=xml
au BufRead,BufNewFile *.test set filetype=xml
au BufRead,BufNewFile *.test.in set filetype=xml
au BufRead,BufNewFile *.dxy set syntax=cpp.doxygen
au BufRead,BufNewFile *.conf set syntax=dosini
au BufRead,BufNewFile Jenkinsfile set syntax=groovy

" edit vimrc/zshrc and load vimrc bindings
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>ez :vsp ~/.zshrc<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" Tags
" Look for a tag file in the directory of the current file, upwards until
" reaching HOME
set tags=./tags,tags;$HOME

" Ctrl-W-Ctrl-[ to open tag in a new tab
map <C-W><C-[> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
" Ctrl-W-Ctrl-] to open tag in a vertical split
map <C-W><C-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" Sourcetrail
let g:sourcetrail_autostart = 1

" Termdebug
let g:termdebug_wide = 1
packadd termdebug

" Python
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

" Jedi-vim
let g:jedi#usages_command = "<leader>u"
let g:jedi#rename_command = "<leader>i"

" Lightline
set laststatus=2

" Configure lightline's statusbar
let g:lightline = {
\  'colorscheme': 'one',
\  'active': {
\   'left': [
\      [ 'mode', 'paste'],
\      ['gitbranch'],
\      ['readonly', 'filename', 'modified'],
\   ],
\   'right': [
\      ['lineinfo'],
\      ['percent'],
\	   ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok']
\   ],
\  },
\  'component_function': {
\  'gitbranch': 'FugitiveHead'
\  },
\}

" Add lightline-ale components to lightline
let g:lightline.component_expand = {
\  'linter_checking': 'lightline#ale#checking',
\  'linter_infos': 'lightline#ale#infos',
\  'linter_warnings': 'lightline#ale#warnings',
\  'linter_errors': 'lightline#ale#errors',
\  'linter_ok': 'lightline#ale#ok'
\ }

" Set colours for the components
let g:lightline.component_type = {
\  'linter_checking': 'left',
\  'linter_infos': 'left',
\  'linter_warnings': 'warning',
\  'linter_errors': 'error',
\  'linter_ok': 'left'
\ }


" ======== LINTING ========

" specify some specific ale linter sources, rest are using defaults
let g:ale_linters = {
\   'c': ['clang', 'clangtidy', 'clang-format'],
\ }

" ======== COMPLETION ========

" Use tab to trigger completion and tab/shift-tab to navigate results
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Close preview pane once completion is
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

" use ctrl-j, ctrl-k for selecting omni completion entries
inoremap <expr> <C-j> pumvisible() ? '<C-n>' : ''
inoremap <expr> <C-k> pumvisible() ? '<C-p>' : ''

" select omni completion entry with enter (always supress newline)
inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"
