" ======== VUNDLE ========
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" ======== PLUGINS ========

" Vundle
Plugin 'VundleVim/Vundle.vim'

" Theme
Plugin 'NLKNguyen/papercolor-theme'

" Whitespace management
Plugin 'ntpeters/vim-better-whitespace'

" Text filtering and allignment
Plugin 'godlygeek/tabular'

" Commenting
Plugin 'scrooloose/nerdcommenter'

" Tree-style file explorer
Plugin 'scrooloose/nerdtree'

" Status/tabline
Plugin 'itchyny/lightline.vim'

" Git
Plugin 'tpope/vim-fugitive'

" Sessions
Plugin 'tpope/vim-obsession'
Plugin 'dhruvasagar/vim-prosession'

" Vim-tmux
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'tmux-plugins/vim-tmux-focus-events'

" Clang-format
Plugin 'rhysd/vim-clang-format'

" Fuzzy finder
Plugin 'junegunn/fzf.vim'

" Asynchronous code linting
Plugin 'dense-analysis/ale'
Plugin 'maximbaz/lightline-ale'

" Coc
Plugin 'neoclide/coc.nvim'

" sourcetrail
Plugin 'CoatiSoftware/vim-sourcetrail'

" Python
Plugin 'vim-python/python-syntax'

" Toml
Plugin 'cespare/vim-toml'

" Dockerfile
Plugin 'ekalinin/Dockerfile.vim'

" Plantuml
Plugin 'scrooloose/vim-slumlord'
Plugin 'aklt/plantuml-syntax'

" Rust
Plugin 'rust-lang/rust.vim'

call vundle#end()

" ======== GENERAL SETTINGS ========

let mapleader = ","
let maplocalleader = ",,"

filetype plugin indent on
set history=500
set omnifunc=syntaxcomplete#Complete
set autoread
set wildmenu
set ruler
set cmdheight=2
set encoding=utf8
set ffs=unix,dos,mac
set number
set mouse=c
set clipboard=unnamedplus
set cursorline
set lazyredraw
set showmatch
set mat=2
set sw=0
syntax enable

" A buffer becomes hidden when it is abandoned
set hid

" number of lines to keep above and below the cursor
:set scrolloff=15

" Configure backspace
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Search
set ignorecase
set smartcase
set hlsearch
set incsearch

" Theme
colorscheme PaperColor
set background=dark

" No backups
set nobackup
set nowb
set noswapfile

" Tabs
set expandtab
set smarttab
set shiftwidth=4
set tabstop=4

" Folding
set foldenable
set foldlevelstart=0
set foldnestmax=10
map <leader>z za

" Search
map <space> /
map <c-space> ?

" Move between splits
set splitbelow splitright

" Remap splits
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" adjust split sizes
noremap <silent> <C-Left> :vertical resize +3<CR>
noremap <silent> <C-Right> :vertical resize -3<CR>
noremap <silent> <C-Up> :resize +3<CR>
noremap <silent> <C-Down> :resize -3<CR>

" Change 2 split windows from vert to horizontal or other way around
map th <C-w>t<C-w>H
map tk <C-w>t<C-w>K

" Switch buffers
map <leader>bl :bnext<cr>
map <leader>bh :bprevious<cr>

" Map window tabs
map tn :tabnew<cr>
map tc :tabclose<cr>
map tm :tabmove
execute "set <M-l>=\el"
execute "set <M-h>=\eh"
noremap <M-l> :tabnext<cr>
noremap <M-h> :tabprev<cr>

" Hide menu bar, toolbar and scrollbar in gui
set guioptions-=m  "menu bar
set guioptions-=T  "toolbar
set guioptions-=r  "scrollbar
set guioptions-=l "scrollbar
set guioptions-=L "scrollbar

" ======== PLUGINS SETTINGS ========

" === Python
let python_highlight_all = 1
let python_version_2 = 0

" === FZF and rg
set rtp+=~/.fzf
nnoremap <C-f> :Files<Cr>
nnoremap <C-g> :Rg<Cr>
let g:fzf_buffers_jump = 1 " [Buffers] Jump to the existing window if possible
let g:fzf_tags_command = 'ctags -R' " [Tags] Command to generate tags file

" === Nerdtree
map <leader>n :NERDTreeToggle<cr>
map <leader>r :NERDTreeFind<cr>
let g:NERDTreeWinSize=30
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

" === Tags
set tags=./tags,tags;$HOME " Look for a tag file in the directory of the current file, upwards until reaching HOME
" Ctrl-W-Ctrl-[ to open tag in a new tab
map <C-W><C-[> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
" Ctrl-W-Ctrl-] to open tag in a vertical split
map <C-W><C-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" === Sourcetrail
let g:sourcetrail_autostart = 1

" === Termdebug
let g:termdebug_wide = 1
packadd termdebug

" === Lightline
set laststatus=2

" statusbar
let g:lightline = {
\  'colorscheme': 'one',
\  'active': {
\   'left': [
\      [ 'mode', 'paste'],
\      ['gitbranch'],
\      ['readonly', 'filename', 'modified'],
\   ],
\   'right': [
\      ['lineinfo'],
\      ['percent'],
\	   ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok']
\   ],
\  },
\  'component_function': {
\  'gitbranch': 'FugitiveHead'
\  },
\}

" lightline-ale
let g:lightline.component_expand = {
\  'linter_checking': 'lightline#ale#checking',
\  'linter_infos': 'lightline#ale#infos',
\  'linter_warnings': 'lightline#ale#warnings',
\  'linter_errors': 'lightline#ale#errors',
\  'linter_ok': 'lightline#ale#ok'
\ }

" components colors
let g:lightline.component_type = {
\  'linter_checking': 'left',
\  'linter_infos': 'left',
\  'linter_warnings': 'warning',
\  'linter_errors': 'error',
\  'linter_ok': 'left'
\ }


" COC

let g:coc_node_path = "/usr/local/bin/node"

" specify some specific ale linter sources, rest are using defaults
"let g:ale_linters = {
"\   'c': ['clang', 'clangtidy', 'clang-format'],
"\ }


" ======== OTHER SETTINGS ========

" Custom file extensions
au BufRead,BufNewFile *.launch set filetype=xml
au BufRead,BufNewFile *.test set filetype=xml
au BufRead,BufNewFile *.test.in set filetype=xml
au BufRead,BufNewFile *.dxy set syntax=cpp.doxygen
au BufRead,BufNewFile *.conf set syntax=dosini
au BufRead,BufNewFile Jenkinsfile set syntax=groovy

" edit vimrc/zshrc and load vimrc bindings
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>ez :vsp ~/.zshrc<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>


" =============== COC
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

"" ======== COMPLETION ========

" Close preview pane once completion is
"autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

"" use ctrl-j, ctrl-k for selecting omni completion entries
"inoremap <expr> <C-j> pumvisible() ? '<C-n>' : ''
"inoremap <expr> <C-k> pumvisible() ? '<C-p>' : ''

"" select omni completion entry with enter (always supress newline)
"inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"






" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
"if exists('*complete_info')
  "inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
"else
  "imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"endif

"" Use `[g` and `]g` to navigate diagnostics
"nmap <silent> [g <Plug>(coc-diagnostic-prev)
"nmap <silent> ]g <Plug>(coc-diagnostic-next)

"" GoTo code navigation.
"nmap <silent> gd <Plug>(coc-definition)
"nmap <silent> gy <Plug>(coc-type-definition)
"nmap <silent> gi <Plug>(coc-implementation)
"nmap <silent> gr <Plug>(coc-references)

"" Use K to show documentation in preview window.
"nnoremap <silent> K :call <SID>show_documentation()<CR>

"function! s:show_documentation()
  "if (index(['vim','help'], &filetype) >= 0)
    "execute 'h '.expand('<cword>')
  "else
    "call CocAction('doHover')
  "endif
"endfunction

"" Highlight the symbol and its references when holding the cursor.
"autocmd CursorHold * silent call CocActionAsync('highlight')

"" Symbol renaming.
"nmap <leader>rn <Plug>(coc-rename)

"" Formatting selected code.
"xmap <leader>f  <Plug>(coc-format-selected)
"nmap <leader>f  <Plug>(coc-format-selected)

"augroup mygroup
  "autocmd!
  "" Setup formatexpr specified filetype(s).
  "autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  "" Update signature help on jump placeholder.
  "autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
"augroup end

"" Applying codeAction to the selected region.
"" Example: `<leader>aap` for current paragraph
"xmap <leader>a  <Plug>(coc-codeaction-selected)
"nmap <leader>a  <Plug>(coc-codeaction-selected)

"" Remap keys for applying codeAction to the current line.
"nmap <leader>ac  <Plug>(coc-codeaction)
"" Apply AutoFix to problem on the current line.
"nmap <leader>qf  <Plug>(coc-fix-current)

"" Introduce function text object
"" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
"xmap if <Plug>(coc-funcobj-i)
"xmap af <Plug>(coc-funcobj-a)
"omap if <Plug>(coc-funcobj-i)
"omap af <Plug>(coc-funcobj-a)

"" Use <TAB> for selections ranges.
"" NOTE: Requires 'textDocument/selectionRange' support from the language server.
"" coc-tsserver, coc-python are the examples of servers that support it.
"nmap <silent> <TAB> <Plug>(coc-range-select)
"xmap <silent> <TAB> <Plug>(coc-range-select)

"" Add `:Format` command to format current buffer.
"command! -nargs=0 Format :call CocAction('format')

"" Add `:Fold` command to fold current buffer.
"command! -nargs=? Fold :call     CocAction('fold', <f-args>)

"" Add `:OR` command for organize imports of the current buffer.
"command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

"" Add (Neo)Vim's native statusline support.
"" NOTE: Please see `:h coc-status` for integrations with external plugins that
"" provide custom statusline: lightline.vim, vim-airline.
"set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

"" Mappings using CoCList:
"" Show all diagnostics.
"nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
"" Manage extensions.
"nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
"" Show commands.
"nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
"" Find symbol of current document.
"nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
"" Search workspace symbols.
"nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
"" Do default action for next item.
"nnoremap <silent> <space>j  :<C-u>CocNext<CR>
"" Do default action for previous item.
"nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
"" Resume latest coc list.
"nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
